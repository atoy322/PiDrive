var canvas = HTMLElement;
var ctx = CanvasRenderingContext2D


function onload() {
    canvas = document.getElementById("screen");
    ctx = canvas.getContext("2d");
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    var s = new Slider("V", 100, 50, 10, 300, 0, 1000);
    var widgets = new Array(1);
    widgets[0] = s;
    var ui = new UserInterface(widgets);
    //canvas.addEventListener("ui", (e)=>{console.log(e);});
    window.addEventListener("resize", onrotation);
}

function coordinate(element, x, y) {
    // 全体的な座標 ⇒ element内の座標
    var pos = element.getBoundingClientRect();
    var X = pos.left + window.pageXOffset;
    var Y = pos.top  + window.pageYOffset;
    var xy = new Array(2);
    xy[0] = x-X;
    xy[1] = y-Y;
    return xy;
}

function onrotation() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
}

class Slider {
    constructor(VH, x, y, width, length, min, max) {
        this.VH = VH;
        this.x = x;
        this.y = y;
        this.width = width;
        this.length = length;
        this.min = min;
        this.max = max;
        this.event = new UIEvent("sliderchange");
    }

    render() {
        ctx.beginPath();
        if(this.VH == "V") {
            ctx.rect(this.x - this.width/2, this.y - this.length/2, this.width, this.length);
        }else if(this.VH == "H") {
            ctx.rect(this.x - this.length/2, this.y - this.width/2, this.length, this.width);
        }
        ctx.fillStyle = "rgb(127, 127, 127)"
        ctx.fill();
        ctx.closePath();
    }

    isTeritory(x, y) {
        if(this.VH == "V") {
            var x_max = this.x + this.width/2;
            var y_max = this.y + this.length/2;
            var x_min = this.x - this.width/2;
            var y_min = this.y - this.length/2;
        }else if(this.VH == "H") {
            var x_max = this.x + this.length/2;
            var y_max = this.y + this.width/2;
            var x_min = this.x - this.length/2;
            var y_min = this.y - this.width/2;
        }

        if((x <= x_max) && (x >= x_min) && (y <= y_max) && (y >= y_min)) {
            return true;
        }else{
            return false;
        }
    }

    getValue() {
    }
}

class UIEvent extends Event {
    constructor(name) {
        super(name);
    }
}

class UserInterface {
    constructor(widgets) {
        this.widgets = widgets;
        canvas.addEventListener("touchmove", this.touchmove.bind(this));
        canvas.addEventListener("touchstart", this.touchstart.bind(this));
        canvas.addEventListener("touchend", this.touchend.bind(this));
        this.render();
    }

    render() {
        for(var i=0; i<this.widgets.length; i++) {
            this.widgets[i].render();
        }

        requestAnimationFrame(this.render.bind(this));
    }

    touchmove(evt) {
        evt.preventDefault();
    
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        var touches = evt.changedTouches;
    
        for(var i=0; i<touches.length; i++) {
            var XY = coordinate(evt.target, touches[i].clientX, touches[i].clientY);
            var x = XY[0];
            var y = XY[1];

            for(var n=0; n<this.widgets.length; n++) {
                console.log(this.widgets[n].isTeritory(x, y));
            }
    
            ctx.beginPath();
            ctx.arc(x, y, 3, 0, 2*Math.PI);
            ctx.fillStyle = "rgb(255, 255, 255)";
            ctx.fill();
            ctx.closePath();
        }
    }

    touchstart(evt) {
        evt.preventDefault();
        console.log("start");
    }

    touchend(evt) {
        evt.preventDefault();
        console.log("end");
    }
}
